


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: Kenneth Lin, Kunpeng Qin
    3 00000000         ; Last modification date: Mar. 23, 2017
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000         ;***************************************************
   23 00000000         ; This is a library for the Adafruit 1.8" SPI display.
   24 00000000         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
   25 00000000         ; ----> http://www.adafruit.com/products/358
   26 00000000         ; as well as Adafruit raw 1.8" TFT display
   27 00000000         ; ----> http://www.adafruit.com/products/618
   28 00000000         ;
   29 00000000         ; Check out the links above for our tutorials and wiring
                        diagrams
   30 00000000         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
   31 00000000         ; interface (RST is optional)
   32 00000000         ; Adafruit invests time and resources providing this ope
                       n source code,
   33 00000000         ; please support Adafruit and open-source hardware by pu
                       rchasing
   34 00000000         ; products from Adafruit!
   35 00000000         ;
   36 00000000         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
   37 00000000         ; MIT license, all text above must be included in any re
                       distribution
   38 00000000         ;****************************************************
   39 00000000         
   40 00000000 40004100 
                       DC      EQU              0x40004100
   41 00000000 00000000 
                       DC_COMMAND
                               EQU              0
   42 00000000 00000040 
                       DC_DATA EQU              0x40
   43 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   44 00000000 4000800C 



ARM Macro Assembler    Page 2 


                       SSI0_SR_R
                               EQU              0x4000800C
   45 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   46 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   47 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   48 00000000         
   49 00000000                 EXPORT           writecommand
   50 00000000                 EXPORT           writedata
   51 00000000         
   52 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   53 00000000                 THUMB
   54 00000000                 ALIGN
   55 00000000         
   56 00000000         ; ******************************************************
                       ***********
   57 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   58 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   59 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   60 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   61 00000000         ; lot of data, the FIFOs are not used when writing
   62 00000000         ; commands, and they are used when writing data.  This
   63 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   64 00000000         ; that is actually being transmitted.
   65 00000000         ; The write command operation waits until all data has b
                       een
   66 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   67 00000000         ; the command, and then waits for the transmission to
   68 00000000         ; finish.
   69 00000000         ; The write data operation waits until there is room in 
                       the
   70 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   71 00000000         ; and then adds the data to the transmit FIFO.
   72 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   73 00000000         ; the SSI0 module is not initialized and enabled.
   74 00000000         ; ******************************************************
                       ***********
   75 00000000         
   76 00000000         ; ******************************************************
                       ***********
   77 00000000         ; ************************* writecommand ***************
                       ***********
   78 00000000         ; This is a helper function that sends an 8-bit command 



ARM Macro Assembler    Page 3 


                       to the LCD.
   79 00000000         ; Input: R0  8-bit command to transmit
   80 00000000         ; Output: none
   81 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   82 00000000         writecommand
   83 00000000         ; 1) Read SSI0_SR_R and check bit 4.
   84 00000000 490F    st1     LDR              R1, =SSI0_SR_R 
                                                            ; Read SSIO_SR_R.
   85 00000002 680A            LDR              R2, [R1]    ; Read SSIO_SR_R.
   86 00000004 F002 0210       AND              R2, #SSI_SR_BSY ; Mask out the 
                                                            4th bit. 
   87 00000008 2A10            CMP              R2, #SSI_SR_BSY ; Compare the m
                                                            asked result with h
                                                            igh. 
   88 0000000A         ; 2) If bit 4 is high, loop back to step 1 (wait for BUS
                       Y bit to be low).
   89 0000000A D0F9            BEQ              st1         ; If it is high, go
                                                             back to step 1. 
   90 0000000C         ; 3) Clear D/C=PA6 to zero.         ; Clear DC. 
   91 0000000C F04F 0200       MOV              R2, #DC_COMMAND ; Clear DC. 
   92 00000010 4B0C            LDR              R3, =DC     ; Clear DC. 
   93 00000012 601A            STR              R2, [R3]    ; We can directly m
                                                            ove 0 in because it
                                                             is bit-addressing 
                                                            and is thus friendl
                                                            y. 
   94 00000014         ; 4) Write the command to SSI0_DR_R.; Write Command to S
                       SI0_DR_R. 
   95 00000014 4B0C            LDR              R3, =SSI0_DR_R ; Write Command 
                                                            to SSI0_DR_R. 
   96 00000016 6018            STR              R0, [R3]    ; Write Command to 
                                                            SSI0_DR_R. 
   97 00000018         ; 5) Read SSI0_SR_R and check bit 4.; Read SSIO_SR_R. 
   98 00000018 4909    st5     LDR              R1, =SSI0_SR_R 
                                                            ; Read SSIO_SR_R.
   99 0000001A 680A            LDR              R2, [R1]    ; Read SSIO_SR_R.
  100 0000001C F002 0210       AND              R2, #SSI_SR_BSY ; Mask out the 
                                                            4th bit. 
  101 00000020 2A10            CMP              R2, #SSI_SR_BSY ; Compare the m
                                                            asked result with h
                                                            igh.  
  102 00000022         ; 6) If bit 4 is high, loop back to step 5 (wait for BUS
                       Y bit to be low).
  103 00000022 D0F9            BEQ              st5         ; If it is high, go
                                                             back to step 5. 
  104 00000024 4770            BX               LR          ; Return. 
  105 00000026         
  106 00000026         ; ******************************************************
                       ***********
  107 00000026         ; *************************** writedata ****************
                       ***********
  108 00000026         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
  109 00000026         ; Input: R0  8-bit data to transmit BUT use STR. 
  110 00000026         ; Output: none
  111 00000026         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
  112 00000026         writedata



ARM Macro Assembler    Page 4 


  113 00000026         ; 1) Read SSI0_SR_R and check bit 1, 
  114 00000026 4906    sp1     LDR              R1, =SSI0_SR_R 
                                                            ; Read SSIO_SR_R.
  115 00000028 680A            LDR              R2, [R1]    ; Read SSIO_SR_R.
  116 0000002A F002 0202       AND              R2, #SSI_SR_TNF ; Mask out the 
                                                            4th bit. 
  117 0000002E 2A02            CMP              R2, #SSI_SR_TNF ; Compare the m
                                                            asked result with h
                                                            igh. 
  118 00000030         ; 2) If bit 1 is low loop back to step 1 (wait for TNF b
                       it to be high)
  119 00000030 D1F9            BNE              sp1         ; If it is low, go 
                                                            back to step 1. 
  120 00000032         ; 3) Set D/C=PA6 to one             ; Set DC to data mod
                       e. 
  121 00000032 F04F 0240       MOV              R2, #DC_DATA ; Clear DC. 
  122 00000036 4B03            LDR              R3, =DC     ; Clear DC. 
  123 00000038 601A            STR              R2, [R3]    ; We can directly m
                                                            ove 0 in because it
                                                             is bit-addressing 
                                                            and is thus friendl
                                                            y. 
  124 0000003A         ; 4) Write the 8-bit data to SSI0_DR_R using STR
  125 0000003A 4B03            LDR              R3, =SSI0_DR_R ; Write data to 
                                                            SSI0_DR_R. 
  126 0000003C 6018            STR              R0, [R3]    ; Write data to SSI
                                                            0_DR_R. 
  127 0000003E 4770            BX               LR          ; Return. 
  128 00000040         
  129 00000040                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  130 00000040                 END                          ; end of file
              4000800C 
              40004100 
              40008008 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lcd.d 
-o.\lcd.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Luminary --predefine="__MICROLIB SETA 1" --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 52 in file LCD.s
   Uses
      None
Comment: .text unused
sp1 00000026

Symbol: sp1
   Definitions
      At line 114 in file LCD.s
   Uses
      At line 119 in file LCD.s
Comment: sp1 used once
st1 00000000

Symbol: st1
   Definitions
      At line 84 in file LCD.s
   Uses
      At line 89 in file LCD.s
Comment: st1 used once
st5 00000018

Symbol: st5
   Definitions
      At line 98 in file LCD.s
   Uses
      At line 103 in file LCD.s
Comment: st5 used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 82 in file LCD.s
   Uses
      At line 49 in file LCD.s
Comment: writecommand used once
writedata 00000026

Symbol: writedata
   Definitions
      At line 112 in file LCD.s
   Uses
      At line 50 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 40 in file LCD.s
   Uses
      At line 92 in file LCD.s
      At line 122 in file LCD.s

DC_COMMAND 00000000

Symbol: DC_COMMAND
   Definitions
      At line 41 in file LCD.s
   Uses
      At line 91 in file LCD.s
Comment: DC_COMMAND used once
DC_DATA 00000040

Symbol: DC_DATA
   Definitions
      At line 42 in file LCD.s
   Uses
      At line 121 in file LCD.s
Comment: DC_DATA used once
SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 43 in file LCD.s
   Uses
      At line 95 in file LCD.s
      At line 125 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 44 in file LCD.s
   Uses
      At line 84 in file LCD.s
      At line 98 in file LCD.s
      At line 114 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 46 in file LCD.s
   Uses
      At line 86 in file LCD.s
      At line 87 in file LCD.s
      At line 100 in file LCD.s
      At line 101 in file LCD.s

SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 45 in file LCD.s
   Uses
      None
Comment: SSI_SR_RNE unused
SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 47 in file LCD.s
   Uses
      At line 116 in file LCD.s
      At line 117 in file LCD.s

8 symbols
347 symbols in table
